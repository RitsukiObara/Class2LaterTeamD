//===========================================
//
// 生き返りの円の範囲の処理[resurrection_fan.h]
// Author 佐藤根詩音
//
//===========================================
//*******************************************
// インクルードファイル
//*******************************************
#include "main.h"
#include "manager.h"
#include "resurrection_fan.h"
#include "object3Dfan.h"

//-------------------------------------------
// マクロ定義
//-------------------------------------------

//-------------------------------------------
// 静的メンバ変数宣言
//-------------------------------------------

//==============================
// コンストラクタ
//==============================
CRessrectionFan::CRessrectionFan()
{
	// 全ての値をクリアする
}

//==============================
// デストラクタ
//==============================
CRessrectionFan::~CRessrectionFan()
{

}

//==============================
// 破片の初期化処理
//==============================
HRESULT CRessrectionFan::Init(void)
{
	//if (FAILED(親クラス::Init()))
	//{ // 初期化処理に失敗した場合

	//	// 失敗を返す
	//	return E_FAIL;
	//}

	// 全ての値を初期化する

	// 値を返す
	return S_OK;
}

//========================================
// 破片の終了処理
//========================================
void CRessrectionFan::Uninit(void)
{
	//// 終了処理
	//親クラス::Uninit();
}

//=====================================
// 破片の更新処理
//=====================================
void CRessrectionFan::Update(void)
{

}

//=====================================
// 破片の描画処理
//=====================================
void CRessrectionFan::Draw(void)
{
	//// 描画処理
	//親クラス::Draw();
}

//=====================================
// 情報の設定処理
//=====================================
void CRessrectionFan::SetData(void/*基本Createと同じ引数を入れる*/)
{
	// 設定処理に便利なマクロ定義
	//NONE_D3DXVECTOR3					// 向きを傾けない時とかに使用する
	//NONE_SCALE						// 拡大率を変更しないときとかに使う
	// 情報の設定処理

	//==========================================================================
	// 2Dポリゴン
	//==========================================================================
	//SetPos(位置を入れる);			// 位置
	//SetPosOld(位置を入れる);		// 前回の位置
	//SetRot(向きを入れる);			// 向き
	//SetSize(サイズを入れる);		// サイズ
	//SetLength(引数無し);			// 長さ
	//SetAngle(引数無し);			// 方向
	//BindTexture(CManager::Get()->GetTexture()->Regist(テクスチャの名前));		// テクスチャの割り当て処理

	//// 頂点座標の設定処理
	//SetVertex();

	//==========================================================================
	// 3Dポリゴン
	//==========================================================================
	//SetPos(位置を入れる);			// 位置
	//SetPosOld(位置を入れる);		// 前回の位置
	//SetRot(向きを入れる);			// 向き
	//SetSize(サイズを入れる);		// サイズ
	//BindTexture(CManager::Get()->GetTexture()->Regist(テクスチャの名前));		// テクスチャの割り当て処理

	//// 頂点座標の設定処理
	//SetVertex();

	//==========================================================================
	// ビルボード
	//==========================================================================
	//SetPos(位置を入れる);			// 位置
	//SetPosOld(位置を入れる);		// 前回の位置
	//SetSize(サイズを入れる);		// サイズ
	//BindTexture(CManager::Get()->GetTexture()->Regist(テクスチャの名前));		// テクスチャの割り当て処理

	//// 頂点座標の設定処理
	//SetVertex();

	//==========================================================================
	// アニメーション系
	//==========================================================================
	//SetPos(位置を入れる);			// 位置
	//SetPosOld(位置を入れる);		// 前回の位置
	//SetRot(向きを入れる);			// 向き
	//SetSize(サイズを入れる);		// サイズ
	//SetLength(引数無し);			// 長さ
	//SetAngle(引数無し);			// 方向
	//BindTexture(CManager::Get()->GetTexture()->Regist(テクスチャの名前));		// テクスチャの割り当て処理

	// アニメーションの設定処理
	//SetAnim(カウントを入れる, パターン数を入れる);

	//// 頂点座標の設定処理
	//SetVertex();

	// テクスチャの設定(アニメーションバージョン)
	//SetVtxTextureAnim(アニメーションの総パターン数を入れる, 0);

	//==========================================================================
	// モデル
	//==========================================================================
	//SetPos(位置を入れる);					// 位置
	//SetPosOld(位置を入れる);				// 前回の位置
	//SetRot(向きを入れる);					// 向き
	//SetScale(拡大率を入れる);				// 拡大率
	//SetFileData(モデルの種類を入れる);	// モデルの情報
}

//=======================================
// 生成処理
//=======================================
CRessrectionFan* CRessrectionFan::Create(void/*引数を入れる*/)
{
	// ローカルオブジェクトを生成
	CRessrectionFan* pRessrectionFan = nullptr;	// サンプルのインスタンスを生成

	if (pRessrectionFan == nullptr)
	{ // オブジェクトが NULL の場合

		// インスタンスを生成
		pRessrectionFan = new CRessrectionFan;
	}
	else
	{ // オブジェクトが NULL じゃない場合

		// 停止
		assert(false);

		// NULL を返す
		return nullptr;
	}

	if (pRessrectionFan != nullptr)
	{ // オブジェクトが NULL じゃない場合

		// 初期化処理
		if (FAILED(pRessrectionFan->Init()))
		{ // 初期化に失敗した場合

			// 停止
			assert(false);

			// NULL を返す
			return nullptr;
		}

		// 情報の設定処理
		pRessrectionFan->SetData(/*引数*/);
	}
	else
	{ // オブジェクトが NULL の場合

		// 停止
		assert(false);

		// NULL を返す
		return nullptr;
	}

	// サンプルのポインタを返す
	return pRessrectionFan;
}